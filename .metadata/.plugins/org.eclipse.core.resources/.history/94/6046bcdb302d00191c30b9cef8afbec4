import java.util.List;


public class Kmeans {
	private int k=10;
	private int nbitmax=30;
	int nbPixel = 28; 
	private List<int[][]> image;
	private int N= image.size();
	private int[] labels; 
	
	private List<int[][]> center ;
	private int[] centerLabels = new int[k];
	private int[][] classes = new int[10][];
	private int[] indicesClasses = new int[k];
	
	
	
	public Kmeans(List<int[][]> image,int [] labels) {
		this.image = image;	
		this.labels = labels;
		for (int i=0 ;i<k ; i++){
			indicesClasses[i] = 0;
		}
	}
	
	

	
	public void main (String[] arg){
		int indice;
		for (int i = 0; i < k; i++){
			indice = (int) (Math.random()*N +1);
			center.set(i,image.get((indice)));
			centerLabels[i] = labels[indice];
			
		}
		for (int[][] matrice: image){
			int min=0;
			double dmin = Matrice.frobeniusNorm(Matrice.minus(matrice, center.get(0)));
			for (int[][] centre: center){
				int[][] x =Matrice.minus(matrice, centre);
				double dx = Matrice.frobeniusNorm(x);
				if (dx<dmin){
					dmin = dx;
					min = center.indexOf(centre);
					
				}
				
			}
			
			classes[min][indicesClasses[min]] = image.indexOf(matrice);
			indicesClasses[min]++; 
			
			
		}
		
		for (int i=0; i<k; i++){
			int[][] somme= new int[nbPixel][nbPixel]; 
			for(int j =0; j< indicesClasses[i]; j++){
				somme =  Matrice.plus(somme, image.get(classes[i][j]));
				}
			
			center.set(i, Matrice.normalize(somme, indicesClasses[i]));
			}
				
			
		}
		
	}



